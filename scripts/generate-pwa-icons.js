// PWAÂõæÊ†áÁîüÊàêËÑöÊú¨
// Áî®‰∫éÁîüÊàê‰∏çÂêåÂ∞∫ÂØ∏ÁöÑPWAÂõæÊ†á

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ÂõæÊ†áÂ∞∫ÂØ∏ÈÖçÁΩÆ
const iconSizes = [
  { size: 16, name: 'icon-16x16.png' },
  { size: 32, name: 'icon-32x32.png' },
  { size: 48, name: 'icon-48x48.png' },
  { size: 72, name: 'icon-72x72.png' },
  { size: 96, name: 'icon-96x96.png' },
  { size: 128, name: 'icon-128x128.png' },
  { size: 144, name: 'icon-144x144.png' },
  { size: 152, name: 'icon-152x152.png' },
  { size: 180, name: 'icon-180x180.png' },
  { size: 192, name: 'icon-192x192.png' },
  { size: 384, name: 'icon-384x384.png' },
  { size: 512, name: 'icon-512x512.png' },
];

// Âø´Êç∑ÊñπÂºèÂõæÊ†áÈÖçÁΩÆ
const shortcutIcons = [
  { size: 96, name: 'shortcut-dashboard.png', description: 'Dashboard shortcut icon' },
  { size: 96, name: 'shortcut-customers.png', description: 'Customers shortcut icon' },
  { size: 96, name: 'shortcut-inventory.png', description: 'Inventory shortcut icon' },
  { size: 96, name: 'shortcut-scanner.png', description: 'QR Scanner shortcut icon' },
];

// Êìç‰ΩúÂõæÊ†áÈÖçÁΩÆ
const actionIcons = [
  { size: 96, name: 'action-explore.png', description: 'Explore action icon' },
  { size: 96, name: 'action-close.png', description: 'Close action icon' },
  { size: 96, name: 'action-inventory.png', description: 'Inventory action icon' },
  { size: 96, name: 'action-event.png', description: 'Event action icon' },
  { size: 96, name: 'action-customer.png', description: 'Customer action icon' },
  { size: 96, name: 'action-order.png', description: 'Order action icon' },
  { size: 96, name: 'action-gift.png', description: 'Gift action icon' },
  { size: 96, name: 'action-update.png', description: 'Update action icon' },
];

// SVGÊ®°Êùø - Èõ™ËåÑ‰∏ªÈ¢òÂõæÊ†á
const generateSVGIcon = (size, type = 'default') => {
  const center = size / 2;
  const strokeWidth = Math.max(1, size / 64);
  
  let svgContent = '';
  
  switch (type) {
    case 'default':
      svgContent = `
        <svg width="${size}" height="${size}" viewBox="0 0 ${size} ${size}" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <linearGradient id="cigarGradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" style="stop-color:#8B4513;stop-opacity:1" />
              <stop offset="50%" style="stop-color:#DAA520;stop-opacity:1" />
              <stop offset="100%" style="stop-color:#F5E6D3;stop-opacity:1" />
            </linearGradient>
          </defs>
          
          <!-- ËÉåÊôØÂúÜÂΩ¢ -->
          <circle cx="${center}" cy="${center}" r="${center - strokeWidth}" fill="url(#cigarGradient)" stroke="#8B4513" stroke-width="${strokeWidth}"/>
          
          <!-- Èõ™ËåÑÂõæÊ†á -->
          <rect x="${center - size * 0.2}" y="${center - size * 0.15}" width="${size * 0.4}" height="${size * 0.3}" rx="${size * 0.05}" fill="#8B4513"/>
          
          <!-- ÁÉüÈõæÊïàÊûú -->
          <path d="M ${center + size * 0.25} ${center - size * 0.1} Q ${center + size * 0.35} ${center - size * 0.2} ${center + size * 0.3} ${center - size * 0.3}" 
                stroke="#F5E6D3" stroke-width="${strokeWidth * 2}" fill="none" opacity="0.7"/>
          <path d="M ${center + size * 0.25} ${center} Q ${center + size * 0.35} ${center - size * 0.05} ${center + size * 0.3} ${center - size * 0.15}" 
                stroke="#F5E6D3" stroke-width="${strokeWidth * 2}" fill="none" opacity="0.5"/>
          <path d="M ${center + size * 0.25} ${center + size * 0.1} Q ${center + size * 0.35} ${center + size * 0.05} ${center + size * 0.3} ${center - size * 0.05}" 
                stroke="#F5E6D3" stroke-width="${strokeWidth * 2}" fill="none" opacity="0.3"/>
          
          <!-- ÂìÅÁâåÊñáÂ≠ó -->
          <text x="${center}" y="${center + size * 0.35}" text-anchor="middle" font-family="serif" font-size="${size * 0.12}" font-weight="bold" fill="#8B4513">JEP</text>
        </svg>
      `;
      break;
      
    case 'dashboard':
      svgContent = `
        <svg width="${size}" height="${size}" viewBox="0 0 ${size} ${size}" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <linearGradient id="dashboardGradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" style="stop-color:#f16d1f;stop-opacity:1" />
              <stop offset="100%" style="stop-color:#e25115;stop-opacity:1" />
            </linearGradient>
          </defs>
          
          <circle cx="${center}" cy="${center}" r="${center - strokeWidth}" fill="url(#dashboardGradient)"/>
          
          <!-- ‰ª™Ë°®ÊùøÂõæÊ†á -->
          <rect x="${center - size * 0.25}" y="${center - size * 0.25}" width="${size * 0.5}" height="${size * 0.5}" rx="${size * 0.05}" fill="white" opacity="0.9"/>
          <circle cx="${center}" cy="${center}" r="${size * 0.15}" fill="none" stroke="#f16d1f" stroke-width="${strokeWidth * 2}"/>
          <path d="M ${center} ${center} L ${center + size * 0.1} ${center - size * 0.1}" stroke="#f16d1f" stroke-width="${strokeWidth * 3}" stroke-linecap="round"/>
        </svg>
      `;
      break;
      
    case 'customers':
      svgContent = `
        <svg width="${size}" height="${size}" viewBox="0 0 ${size} ${size}" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <linearGradient id="customersGradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" style="stop-color:#1890ff;stop-opacity:1" />
              <stop offset="100%" style="stop-color:#096dd9;stop-opacity:1" />
            </linearGradient>
          </defs>
          
          <circle cx="${center}" cy="${center}" r="${center - strokeWidth}" fill="url(#customersGradient)"/>
          
          <!-- Áî®Êà∑ÂõæÊ†á -->
          <circle cx="${center}" cy="${center - size * 0.1}" r="${size * 0.12}" fill="white"/>
          <path d="M ${center - size * 0.2} ${center + size * 0.1} A ${size * 0.2} ${size * 0.15} 0 0 1 ${center + size * 0.2} ${center + size * 0.1} Z" fill="white"/>
        </svg>
      `;
      break;
      
    case 'inventory':
      svgContent = `
        <svg width="${size}" height="${size}" viewBox="0 0 ${size} ${size}" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <linearGradient id="inventoryGradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" style="stop-color:#52c41a;stop-opacity:1" />
              <stop offset="100%" style="stop-color:#389e0d;stop-opacity:1" />
            </linearGradient>
          </defs>
          
          <circle cx="${center}" cy="${center}" r="${center - strokeWidth}" fill="url(#inventoryGradient)"/>
          
          <!-- Â∫ìÂ≠òÂõæÊ†á -->
          <rect x="${center - size * 0.25}" y="${center - size * 0.15}" width="${size * 0.5}" height="${size * 0.3}" rx="${size * 0.03}" fill="white"/>
          <rect x="${center - size * 0.2}" y="${center - size * 0.1}" width="${size * 0.4}" height="${size * 0.2}" fill="url(#inventoryGradient)" opacity="0.3"/>
        </svg>
      `;
      break;
      
    case 'scanner':
      svgContent = `
        <svg width="${size}" height="${size}" viewBox="0 0 ${size} ${size}" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <linearGradient id="scannerGradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" style="stop-color:#722ed1;stop-opacity:1" />
              <stop offset="100%" style="stop-color:#531dab;stop-opacity:1" />
            </linearGradient>
          </defs>
          
          <circle cx="${center}" cy="${center}" r="${center - strokeWidth}" fill="url(#scannerGradient)"/>
          
          <!-- QRÁ†ÅÊâ´ÊèèÂõæÊ†á -->
          <rect x="${center - size * 0.2}" y="${center - size * 0.2}" width="${size * 0.4}" height="${size * 0.4}" fill="none" stroke="white" stroke-width="${strokeWidth * 2}"/>
          <rect x="${center - size * 0.15}" y="${center - size * 0.15}" width="${size * 0.3}" height="${size * 0.3}" fill="white" opacity="0.2"/>
          <circle cx="${center}" cy="${center}" r="${size * 0.05}" fill="white"/>
        </svg>
      `;
      break;
      
    default:
      svgContent = generateSVGIcon(size, 'default');
  }
  
  return svgContent.trim();
};

// ÁîüÊàêÂç†‰ΩçÁ¨¶PNGÂõæÊ†áÔºàBase64ÁºñÁ†ÅÔºâ
const generatePlaceholderPNG = (size) => {
  // ËøôÈáåÂ∫îËØ•‰ΩøÁî®ÂõæÂÉèÂ§ÑÁêÜÂ∫ìÂ¶ÇsharpÊàñcanvasÊù•ÁîüÊàêPNG
  // ‰∏∫‰∫ÜÁÆÄÂåñÔºåÊàë‰ª¨ÂàõÂª∫‰∏Ä‰∏™SVGÂç†‰ΩçÁ¨¶
  const svg = generateSVGIcon(size);
  const base64 = Buffer.from(svg).toString('base64');
  return `data:image/svg+xml;base64,${base64}`;
};

// ÂàõÂª∫ÂõæÊ†áÊñá‰ª∂
const createIconFile = (size, name, type = 'default') => {
  const iconsDir = path.join(__dirname, '..', 'public', 'icons');
  
  // Á°Æ‰øùiconsÁõÆÂΩïÂ≠òÂú®
  if (!fs.existsSync(iconsDir)) {
    fs.mkdirSync(iconsDir, { recursive: true });
  }
  
  const svgContent = generateSVGIcon(size, type);
  const filePath = path.join(iconsDir, name.replace('.png', '.svg'));
  
  try {
    fs.writeFileSync(filePath, svgContent);
    console.log(`‚úÖ ÁîüÊàêÂõæÊ†á: ${name} (${size}x${size})`);
  } catch (error) {
    console.error(`‚ùå ÁîüÊàêÂõæÊ†áÂ§±Ë¥•: ${name}`, error.message);
  }
};

// ÁîüÊàêÊâÄÊúâÂõæÊ†á
const generateAllIcons = () => {
  console.log('üé® ÂºÄÂßãÁîüÊàêPWAÂõæÊ†á...\n');
  
  // ÁîüÊàê‰∏ªË¶ÅÂõæÊ†á
  console.log('üì± ÁîüÊàê‰∏ªË¶ÅÂõæÊ†á:');
  iconSizes.forEach(({ size, name }) => {
    createIconFile(size, name, 'default');
  });
  
  console.log('\nüöÄ ÁîüÊàêÂø´Êç∑ÊñπÂºèÂõæÊ†á:');
  shortcutIcons.forEach(({ size, name }) => {
    const type = name.split('-')[1].split('.')[0];
    createIconFile(size, name, type);
  });
  
  console.log('\n‚ö° ÁîüÊàêÊìç‰ΩúÂõæÊ†á:');
  actionIcons.forEach(({ size, name }) => {
    const type = name.split('-')[1].split('.')[0];
    createIconFile(size, name, type);
  });
  
  console.log('\n‚ú® PWAÂõæÊ†áÁîüÊàêÂÆåÊàê!');
  console.log('\nüìã ‰ΩøÁî®ËØ¥Êòé:');
  console.log('1. Ëøô‰∫õÊòØSVGÊ†ºÂºèÁöÑÂç†‰ΩçÁ¨¶ÂõæÊ†á');
  console.log('2. ËØ∑‰ΩøÁî®‰∏ì‰∏öËÆæËÆ°Â∑•ÂÖ∑ÂàõÂª∫PNGÊ†ºÂºèÁöÑÂõæÊ†á');
  console.log('3. Âª∫ËÆÆ‰ΩøÁî®Èõ™ËåÑ‰∏ªÈ¢òÁöÑËÆæËÆ°ÂÖÉÁ¥†');
  console.log('4. Á°Æ‰øùÂõæÊ†áÂú®‰∏çÂêåËÉåÊôØ‰∏ãÈÉΩÊ∏ÖÊô∞ÂèØËßÅ');
  console.log('5. ÈÅµÂæ™PWAÂõæÊ†áËÆæËÆ°ÊúÄ‰Ω≥ÂÆûË∑µ');
  
  console.log('\nüéØ ‰∏ã‰∏ÄÊ≠•:');
  console.log('1. Â∞ÜSVGÂõæÊ†áËΩ¨Êç¢‰∏∫PNGÊ†ºÂºè');
  console.log('2. ‰ΩøÁî®ÂõæÂÉèÁºñËæëËΩØ‰ª∂‰ºòÂåñÂõæÊ†á');
  console.log('3. Á°Æ‰øùÂõæÊ†áÁ¨¶ÂêàÊÇ®ÁöÑÂìÅÁâåËÆæËÆ°');
  console.log('4. ÊµãËØïÂõæÊ†áÂú®‰∏çÂêåËÆæÂ§á‰∏äÁöÑÊòæÁ§∫ÊïàÊûú');
};

// ÁîüÊàêÂõæÊ†á‰ΩøÁî®ÊåáÂçó
const generateIconGuide = () => {
  const guide = `
# PWAÂõæÊ†á‰ΩøÁî®ÊåáÂçó

## ÂõæÊ†áÂ∞∫ÂØ∏Ë¶ÅÊ±Ç

### ‰∏ªË¶ÅÂõæÊ†á
- 16x16px - ÊµèËßàÂô®Ê†áÁ≠æÈ°µÂõæÊ†á
- 32x32px - WindowsÊ°åÈù¢ÂõæÊ†á
- 48x48px - AndroidÂêØÂä®Âô®ÂõæÊ†á
- 72x72px - AndroidÂêØÂä®Âô®ÂõæÊ†á
- 96x96px - AndroidÂêØÂä®Âô®ÂõæÊ†á
- 128x128px - AndroidÂêØÂä®Âô®ÂõæÊ†á
- 144x144px - WindowsÁ£ÅË¥¥ÂõæÊ†á
- 152x152px - iOS SafariÂõæÊ†á
- 180x180px - iOS‰∏ªÂ±èÂπïÂõæÊ†á
- 192x192px - Android ChromeÂõæÊ†áÔºàÊé®ËçêÔºâ
- 384x384px - Android ChromeÂõæÊ†á
- 512x512px - Android ChromeÂõæÊ†áÔºàÊé®ËçêÔºâ

### Âø´Êç∑ÊñπÂºèÂõæÊ†á
- 96x96px - Â∫îÁî®Âø´Êç∑ÊñπÂºèÂõæÊ†á

### Êìç‰ΩúÂõæÊ†á
- 96x96px - ÈÄöÁü•Êìç‰ΩúÂõæÊ†á

## ËÆæËÆ°Âª∫ËÆÆ

### ËßÜËßâÈ£éÊ†º
- ‰ΩøÁî®Èõ™ËåÑ‰∏ªÈ¢òÁöÑËÆæËÆ°ÂÖÉÁ¥†
- ‰øùÊåÅÁÆÄÊ¥ÅÊòé‰∫ÜÁöÑËÆæËÆ°
- Á°Æ‰øùÂú®Â∞èÂ∞∫ÂØ∏‰∏ã‰πüËÉΩÊ∏ÖÊô∞ËØÜÂà´
- ‰ΩøÁî®ÂìÅÁâåËâ≤ÂΩ©ÊñπÊ°à

### ÊäÄÊúØËßÑËåÉ
- Ê†ºÂºèÔºöPNGÔºàÊé®ËçêÔºâÊàñSVG
- ËÉåÊôØÔºöÈÄèÊòéÊàñÁ∫ØËâ≤
- ÂúÜËßíÔºöÂèØÈÄâÁöÑÂúÜËßíËÆæËÆ°
- Èò¥ÂΩ±ÔºöÈÅøÂÖçÂ§çÊùÇÁöÑÈò¥ÂΩ±ÊïàÊûú

### ÊµãËØïË¶ÅÊ±Ç
- Âú®‰∏çÂêåËÉåÊôØ‰∏ãÊµãËØïÂèØËßÅÊÄß
- Âú®Â§öÁßçËÆæÂ§á‰∏äÊµãËØïÊòæÁ§∫ÊïàÊûú
- Á°Æ‰øùÂõæÊ†á‰∏ç‰ºöÊ®°Á≥äÊàñÂ§±Áúü
- È™åËØÅ‰∏çÂêåÂ∞∫ÂØ∏‰∏ãÁöÑÊ∏ÖÊô∞Â∫¶

## Â∑•ÂÖ∑Êé®Ëçê

### Âú®Á∫øÂ∑•ÂÖ∑
- [PWA Icon Generator](https://tools.crawlink.com/tools/pwa-icon-generator/)
- [Favicon Generator](https://realfavicongenerator.net/)
- [App Icon Generator](https://appicon.co/)

### ËÆæËÆ°ËΩØ‰ª∂
- Adobe Illustrator
- Figma
- Sketch
- Canva

## ÈÉ®ÁΩ≤ËØ¥Êòé

1. Â∞ÜÁîüÊàêÁöÑPNGÂõæÊ†áÊîæÁΩÆÂú® \`public/icons/\` ÁõÆÂΩï‰∏ã
2. Á°Æ‰øùÊñá‰ª∂Âêç‰∏émanifest.json‰∏≠ÁöÑÈÖçÁΩÆ‰∏ÄËá¥
3. Êõ¥Êñ∞Service Worker‰∏≠ÁöÑÁºìÂ≠òÁ≠ñÁï•
4. ÊµãËØïÂõæÊ†áÁöÑÂä†ËΩΩÂíåÊòæÁ§∫ÊïàÊûú
`;

  const guidePath = path.join(__dirname, '..', 'PWA_ICON_GUIDE.md');
  fs.writeFileSync(guidePath, guide);
  console.log('\nüìñ Â∑≤ÁîüÊàêÂõæÊ†á‰ΩøÁî®ÊåáÂçó: PWA_ICON_GUIDE.md');
};

// ‰∏ªÂáΩÊï∞
const main = () => {
  try {
    generateAllIcons();
    generateIconGuide();
  } catch (error) {
    console.error('‚ùå ÂõæÊ†áÁîüÊàêÂ§±Ë¥•:', error.message);
    process.exit(1);
  }
};

// ËøêË°åËÑöÊú¨
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export {
  generateAllIcons,
  generateIconGuide,
  generateSVGIcon,
};
